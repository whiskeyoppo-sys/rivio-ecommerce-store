// Fully conceptualized - Database schema
// Design choice: Comprehensive e-commerce data model with relationships

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication and profile
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String
  role          Role      @default(USER)
  emailVerified Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  orders        Order[]
  reviews       Review[]
  addresses     Address[]
  cart          Cart?
  sessions      Session[]
  
  @@index([email])
}

enum Role {
  USER
  ADMIN
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  token        String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token])
  @@index([userId])
}

// Product catalog
model Product {
  id          String   @id @default(cuid())
  sku         String   @unique
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  compareAt   Decimal? @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)
  stock       Int      @default(0)
  active      Boolean  @default(true)
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  images      Image[]
  variants    Variant[]
  tags        Tag[]
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]
  
  // AI-generated fields (optional)
  aiDescription String?
  embeddings    Float[]
  
  @@index([slug])
  @@index([categoryId])
  @@index([active, featured])
}

model Variant {
  id        String   @id @default(cuid())
  productId String
  name      String
  sku       String   @unique
  price     Decimal? @db.Decimal(10, 2)
  stock     Int      @default(0)
  options   Json     // { size: "L", color: "Blue" }
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
  @@index([sku])
}

model Category {
  id          String     @id @default(cuid())
  name        String
  slug        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]
  
  @@index([slug])
  @@index([parentId])
}

model Tag {
  id       String    @id @default(cuid())
  name     String    @unique
  slug     String    @unique
  products Product[]
}

model Image {
  id        String  @id @default(cuid())
  url       String
  alt       String?
  productId String
  order     Int     @default(0)
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@index([productId])
}

// Shopping cart
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  user User @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  variantId String?
  
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@unique([cartId, productId, variantId])
  @@index([cartId])
}

// Orders and payments
model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  email           String
  status          OrderStatus @default(PENDING)
  subtotal        Decimal     @db.Decimal(10, 2)
  tax             Decimal     @db.Decimal(10, 2)
  shipping        Decimal     @db.Decimal(10, 2)
  total           Decimal     @db.Decimal(10, 2)
  currency        String      @default("USD")
  paymentMethod   String?
  paymentIntentId String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  // Relations
  user            User?       @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address?    @relation("ShippingAddress")
  billingAddress  Address?    @relation("BillingAddress")
  payment         Payment?
  
  @@index([userId])
  @@index([orderNumber])
  @@index([status])
}

enum OrderStatus {
  PENDING
  PROCESSING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  name      String
  sku       String
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
  variantId String?
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
  
  @@index([orderId])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String        @unique
  provider      String        // stripe, paypal
  status        PaymentStatus @default(PENDING)
  amount        Decimal       @db.Decimal(10, 2)
  currency      String
  transactionId String?
  metadata      Json?
  createdAt     DateTime      @default(now())
  
  order Order @relation(fields: [orderId], references: [id])
  
  @@index([transactionId])
}

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  CANCELLED
  REFUNDED
}

// User addresses
model Address {
  id           String  @id @default(cuid())
  userId       String
  type         String  // shipping, billing
  firstName    String
  lastName     String
  company      String?
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  phone        String?
  isDefault    Boolean @default(false)
  
  user            User    @relation(fields: [userId], references: [id])
  shippingOrders  Order[] @relation("ShippingAddress")
  billingOrders   Order[] @relation("BillingAddress")
  
  @@index([userId])
}

// Product reviews
model Review {
  id        String   @id @default(cuid())
  productId String
  userId    String
  rating    Int      // 1-5
  title     String?
  comment   String?
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id])
  
  @@unique([productId, userId])
  @@index([productId])
  @@index([userId])
}
